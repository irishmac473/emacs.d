#+TITLE: My Emacs Configuration
#+AUTHOR: Caleb McCaffery
#+EMAIL: irishmac473@icloud.com
#+PROPERTY: header-args :tangle yes
#+STARTUP: content

This is my Emacs config using org-mode with org-babel. It is full of many
snippets of other users copied configs. I am eternally grateful to these other
emacs geniuses.
* Meta
All changes to the config should be done in =init.org=.
When this config is loaded for the first time, the =init.el= is the file that
is loaded. It looks like this:
#+BEGIN_SRC emacs-lisp :tangle no

; This file replaces itself with the actual configuration at first run.

;; We can't tangle without org!
(require 'org)
;; Open the configuration
(find-file (concat user-emacs-directory "init.org"))
;; tangle it
(org-babel-tangle)
;; load it
(load-file (concat user-emacs-directory "init.el"))
;; finally byte-compile it
(byte-compile-file (concat user-emacs-directory "init.el"))

#+end_src
It tangles the org-file, so that the file is overwritten with the actual config.

Add lexical scoping for the init-file. The first line of the config is as follows
#+BEGIN_SRC emacs-lisp
;;; -*- lexical-binding: t -*-
#+END_SRC

Add a function to the =after-save-hook= ensuring to always tangle and
byte-compile the =org=-document after changes.
#+BEGIN_SRC emacs-lisp
(defun tangle-init ()
  "If the current buffer is init.org the code-blocks are
tangled, and the tangled file is compiled."
  (when (equal (buffer-file-name)
               (expand-file-name (concat user-emacs-directory "init.org")))
    ;; Avoid running hooks when tangling.
    (let ((prog-mode-hook nil))
      (org-babel-tangle)
      (byte-compile-file (concat user-emacs-directory "init.el")))))

(add-hook 'after-save-hook 'tangle-init)
#+END_SRC
* Repos & Core Packages
** use-package
Initialize =use-package=
#+BEGIN_SRC emacs-lisp
(require 'use-package)
(setq use-package-always-ensure t)
#+END_SRC
** Repos
Initialize Repos to use
#+BEGIN_SRC emacs-lisp
(setq package-archives
        '(("GNU ELPA"     . "https://elpa.gnu.org/packages/")
          ("MELPA Stable" . "https://stable.melpa.org/packages/")
          ("MELPA"        . "https://melpa.org/packages/"))
        package-archive-priorities
        '(("GNU ELPA"     . 10)
          ("MELPA"        . 5)
          ("MELPA Stable" . 0)))
#+END_SRC
* Sane Defaults
Set =utf-8= as the preferred coding system
#+BEGIN_SRC emacs-lisp
(set-language-environment "UTF-8")
(prefer-coding-system 'utf-8)
#+END_SRC

Set some variable values with =setq=
#+BEGIN_SRC emacs-lisp
(setq auto-revert-interval 1            ; Refresh buffers fast
      default-input-method "TeX"        ; Use TeX when toggling input method
      echo-keystrokes 0.1               ; Show keystrokes asap
      enable-recursive-minibuffers t    ; Allow recursive minibuffers
      frame-inhibit-implied-resize 1    ; Don't resize frame implicitly
      inhibit-startup-screen t          ; No splash screen please
      initial-scratch-message nil       ; Clean scratch buffer
      recentf-max-saved-items 10000     ; Show more recent files
      ring-bell-function 'ignore        ; Quiet
      scroll-margin 1                   ; Space between cursor and top/bottom
      sentence-end-double-space nil     ; No double space
      custom-file                       ; Customizations in a separate file
      (concat user-emacs-directory "custom.el"))
;; Some mac-bindings interfere with Emacs bindings.
(when (boundp 'mac-pass-command-to-system)
  (setq mac-pass-command-to-system nil))
#+END_SRC

Some variables are buffer-local. Using =segq-default= we change the
buffer-local variable's default value.
#+BEGIN_SRC emacs-lisp
(setq-default tab-width 4                       ; Smaller tabs
              fill-column 79                    ; Maximum line width
              truncate-lines t                  ; Don't fold lines
              indent-tabs-mode nil              ; Use spaces instead of tabs
              split-width-threshold 160         ; Split verticly by default
              split-height-threshold nil        ; Split verticly by default
              frame-resize-pixelwise t          ; Fine-grained frame resize
              auto-fill-function 'do-auto-fill) ; Auto-fill-mode everywhere
#+END_SRC

I don't want to answer emacs everytime by typing out ~yes~ and ~no~.
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Avoid file system clutter by putting all auto saved files in a single
directory
#+BEGIN_SRC emacs-lisp
(defvar emacs-autosave-directory
  (concat user-emacs-directory "autosaves/")
  "This variable dictates where to put auto saves. It is set to a
  directory called autosaves located wherever your .emacs.d/ is
  located.")

;; Sets all files to be backed up and auto saved in a single directory.
(setq backup-directory-alist
      `((".*" . ,emacs-autosave-directory))
      auto-save-file-name-transforms
      `((".*" ,emacs-autosave-directory t)))
#+END_SRC

* Visual
We declutter and remove the clicky things. We also relax the cursor. This
goes in early-init.
#+BEGIN_SRC emacs-lisp :tangle early-init.el
(dolist (mode
         '(tool-bar-mode                ; No toolbars, more room for text
           scroll-bar-mode              ; No scroll bars either
           blink-cursor-mode))          ; The blinking cursor gets old
  (funcall mode 0))
#+END_SRC

Add a small border on the frame. Also in the early-init
#+BEGIN_SRC emacs-lisp :tangle early-init.el
(add-to-list 'default-frame-alist '(undecorated-round . t))
(add-to-list 'default-frame-alist '(internal-border-width . 24))
#+END_SRC

* Theme
Using the [[https://github.com/doomemacs/themes][Doom Emacs]] theme
#+BEGIN_SRC emacs-lisp
;; DOOM theme
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-one t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (nerd-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+END_SRC
* Mode line
Use the [[https://github.com/seagle0128/doom-modeline][Doom Modeline]]
#+BEGIN_SRC emacs-lisp
;; DOOM modeline
(use-package doom-modeline
  :ensure t
  :hook (after-init . doom-modeline-mode))
#+END_SRC
* Font
I like the [[https://fonts.google.com/specimen/Ubuntu+Mono][Ubuntu Mono font]].
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist
             '(font . "Ubuntu Mono-16"))
#+END_SRC

* Evil
I came from Vim and although Emacs is great, I like to edit files
Vim style.
#+BEGIN_SRC emacs-lisp
;; Evil Mode
(use-package evil
  :ensure t
  :config

  (evil-mode 1)
  (use-package evil-leader
    :ensure t
    :config
    (global-evil-leader-mode t)
    (evil-leader/set-leader "<SPC>")
    (evil-leader/set-key
;;      "s s" 'swiper
      "d x w" 'delete-trailing-whitespace))

  (use-package evil-surround
    :ensure t
    :config (global-evil-surround-mode))

  (use-package evil-indent-textobject
    :ensure t)

  (use-package evil-org
    :ensure t
    :config
    (evil-org-set-key-theme
	  '(textobjects insert navigation additional shift todo heading))
    (add-hook 'org-mode-hook (lambda () (evil-org-mode))))

  (use-package powerline-evil
    :ensure t
    :config
    (powerline-evil-vim-color-theme)))
#+END_SRC
